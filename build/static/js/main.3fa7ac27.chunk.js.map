{"version":3,"sources":["Timer.js","serviceWorker.js","index.js"],"names":["Timer","useState","minutos","setMinutos","activo","setActivo","tipo","setTipo","myRef","useRef","sonido","Audio","toggle","reset","cambioTipo","agregaSegundos","ref","current","value","sound","play","src","useEffect","intervalo","document","title","setInterval","alert","clearInterval","className","width","height","alt","Math","trunc","onClick","type","placeholder","autoComplete","onChange","target","href","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fa7ac27.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Howl } from \"howler\";\r\nimport \"./Timer.css\";\r\n\r\nconst Timer = () => {\r\n  const [minutos, setMinutos] = useState(1500);\r\n  const [activo, setActivo] = useState(false);\r\n  const [tipo, setTipo] = useState(\"Pomodoro\");\r\n  const myRef = useRef(null);\r\n\r\n  var sonido = new Audio();\r\n  sonido.src = \"sonido.mp3\";\r\n\r\n  /* ///////////////////FUNCIONES/////////////////// */\r\n\r\n  function toggle() {\r\n    setActivo(!activo);\r\n  }\r\n\r\n  function reset() {\r\n    setMinutos(1500);\r\n    setActivo(false);\r\n    setTipo(\"Pomodoro\");\r\n  }\r\n\r\n  function timeBreak() {\r\n    setMinutos(300);\r\n    setTipo(\"Break\");\r\n  }\r\n\r\n  function cambioTipo() {\r\n    if (tipo === \"Agregar Tiempo\") {\r\n      setTipo(\"Pomodoro\");\r\n    } else if (tipo === \"Pomodoro\") {\r\n      setTipo(\"Agregar Tiempo\");\r\n    } else setTipo(\"Pomodoro\");\r\n  }\r\n\r\n  function agregaSegundos() {\r\n    // `current` apunta al elemento de entrada de texto montado\r\n    let ref = myRef.current.value;\r\n    setMinutos(ref * 60);\r\n  }\r\n\r\n  function sound() {\r\n    return sonido.play();\r\n  }\r\n\r\n  /* ///////////////////useEffect Comprobaciones/////////////////// */\r\n\r\n  useEffect(() => {\r\n    {\r\n      /* NOTE: setInterval: nos permite ejecutar una determinada función o bloque de código cada\r\n       cierto intervalo de tiempo definido en milisegundos. Esto se va a ejecutar hasta\r\n        el momento \r\n       en que se llamé al método clearInterval */\r\n    }\r\n\r\n    let intervalo = null;\r\n    if ((activo && tipo === \"Pomodoro\") || tipo === \"Break\") {\r\n      document.title = \"Work\";\r\n      intervalo = setInterval(() => {\r\n        setMinutos(() => minutos - 1);\r\n      }, 1000);\r\n    }\r\n    if (activo && tipo === \"Agregar Tiempo\") {\r\n      document.title = \"Work\";\r\n      if (minutos >= 0) {\r\n        intervalo = setInterval(() => {\r\n          setMinutos((minutos) => minutos - 1);\r\n        }, 1000);\r\n      } else {\r\n        return () => {\r\n          alert(\"El numero ingresado no es valido\");\r\n          clearInterval(intervalo);\r\n          reset();\r\n        };\r\n      }\r\n    }\r\n    if (!activo && minutos === 0 && tipo == \"Pomodoro\") {\r\n      clearInterval(intervalo);\r\n    }\r\n    if ((minutos === 0 && tipo == \"Pomodoro\") || tipo == \"Agregar Tiempo\") {\r\n      sound();\r\n      timeBreak();\r\n      document.title = \"Break\";\r\n      clearInterval(intervalo);\r\n    }\r\n    if (minutos === 0 && tipo == \"Break\") {\r\n      sound();\r\n      reset();\r\n      document.title = \"Work!\";\r\n      clearInterval(intervalo);\r\n    }\r\n\r\n    return () => clearInterval(intervalo);\r\n  }, [activo, minutos, tipo]);\r\n\r\n  /* ///////////////////RENDERIZADO/////////////////// */\r\n\r\n  if (tipo == \"Pomodoro\" || tipo == \"Agregar Tiempo\") {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"container\">\r\n          <img\r\n            src=\"https://services.garmin.com/appsLibraryBusinessServices_v0/rest/apps/4b11ad8f-3e48-4112-83df-336065c49829/icon/d31ca7be-0497-4370-801f-97a29dc3b584\"\r\n            width=\"100\"\r\n            height=\"100\"\r\n            alt=\"pomodoro\"\r\n          />\r\n          <div className=\"time\">\r\n            {Math.trunc(minutos / 60)}:{minutos % 60}\r\n          </div>\r\n          <div className=\"row\">\r\n            <button\r\n              className={`button button-primary button-primary-${\r\n                activo ? \"active\" : \"inactive\"\r\n              }`}\r\n              onClick={toggle}\r\n            >\r\n              {activo ? \"Pause\" : \"Start\"}\r\n            </button>\r\n            <button className=\"button button-secondary\" onClick={reset}>\r\n              Reset\r\n            </button>\r\n          </div>\r\n          <button className=\"button button-cambio\" onClick={cambioTipo}>\r\n            {tipo}\r\n          </button>\r\n          {tipo === \"Agregar Tiempo\" && (\r\n            <input\r\n              className=\"input\"\r\n              type=\"number\"\r\n              placeholder=\"Ingresa los minutos\"\r\n              autoComplete=\"off\"\r\n              ref={myRef}\r\n              onChange={agregaSegundos}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"imgContainer\">\r\n          <a target=\"_blank\" href=\"https://www.linkedin.com/in/liam-marega/\">\r\n            <img\r\n              src=\"https://cdn-icons-png.flaticon.com/512/174/174857.png\"\r\n              alt=\"html5\"\r\n              width=\"40\"\r\n              height=\"40\"\r\n            />\r\n          </a>\r\n          <a target=\"_blank\" href=\"https://github.com/LiamMarega\">\r\n            <img\r\n              src=\"https://cdn-icons-png.flaticon.com/512/25/25231.png\"\r\n              alt=\"html5\"\r\n              width=\"40\"\r\n              height=\"40\"\r\n            />\r\n          </a>\r\n          <a href=\"mailto:liammarega85@gmail.com\">\r\n            <img\r\n              src=\"http://cdn.onlinewebfonts.com/svg/img_237869.png\"\r\n              alt=\"html5\"\r\n              width=\"40\"\r\n              height=\"40\"\r\n            />\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else\r\n    return (\r\n      <div className=\"appGreen\">\r\n        <div className=\"containerGreen\">\r\n          <img\r\n            src=\"https://services.garmin.com/appsLibraryBusinessServices_v0/rest/apps/4b11ad8f-3e48-4112-83df-336065c49829/icon/d31ca7be-0497-4370-801f-97a29dc3b584\"\r\n            width=\"100\"\r\n            height=\"100\"\r\n            alt=\"pomodoro\"\r\n          />\r\n          <div className=\"time\">\r\n            {Math.trunc(minutos / 60)}:{minutos % 60}\r\n          </div>\r\n          <div className=\"row\">\r\n            <button\r\n              className={`button button-primary button-primary-${\r\n                activo ? \"active\" : \"inactive\"\r\n              }`}\r\n              onClick={toggle}\r\n            >\r\n              {activo ? \"Pausa\" : \"Inicio\"}\r\n            </button>\r\n            <button className=\"button button-secondary\" onClick={reset}>\r\n              Reset\r\n            </button>\r\n          </div>\r\n          <button className=\"button button-cambio\" onClick={cambioTipo}>\r\n            {tipo}\r\n          </button>\r\n          {tipo === \"Agregar Tiempo\" && (\r\n            <input\r\n              className=\"input\"\r\n              type=\"number\"\r\n              placeholder=\"Ingresa los minutos\"\r\n              autoComplete=\"off\"\r\n              ref={myRef}\r\n              onChange={agregaSegundos}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"imgContainer\">\r\n          <a target=\"_blank\" href=\"https://www.linkedin.com/in/liam-marega/\">\r\n            <img\r\n              src=\"https://cdn-icons-png.flaticon.com/512/174/174857.png\"\r\n              alt=\"html5\"\r\n              width=\"40\"\r\n              height=\"40\"\r\n            />\r\n          </a>\r\n          <a target=\"_blank\" href=\"https://github.com/LiamMarega\">\r\n            <img\r\n              src=\"https://cdn-icons-png.flaticon.com/512/25/25231.png\"\r\n              alt=\"html5\"\r\n              width=\"40\"\r\n              height=\"40\"\r\n            />\r\n          </a>\r\n          <a target=\"_blank\" href=\"mailto:liammarega85@gmail.com\">\r\n            <img\r\n              src=\"http://cdn.onlinewebfonts.com/svg/img_237869.png\"\r\n              alt=\"html5\"\r\n              width=\"40\"\r\n              height=\"40\"\r\n            />\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Timer;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Timer from './Timer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Timer />, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}